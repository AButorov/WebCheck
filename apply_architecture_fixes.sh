#!/bin/zsh

echo "üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π WebCheck"
echo "================================================"
echo "–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Offscreen API"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "package.json" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

echo "‚úÖ –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"

# 1. –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–π OffscreenManager —Å Singleton –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
echo ""
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ OffscreenManager..."

cat > src/background/offscreenManagerFixed.ts << 'EOF'
/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä offscreen-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å Singleton –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ offscreen-–¥–æ–∫—É–º–µ–Ω—Ç–∞
 */

// Singleton –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è offscreen –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
class OffscreenManager {
  private static instance: OffscreenManager;
  private isCreating = false;
  private documentExists = false;
  private lastCheck = 0;
  private readonly CACHE_DURATION = 5000; // 5 —Å–µ–∫—É–Ω–¥ –∫—ç—à–∞
  private readonly DOCUMENT_PATH = 'offscreen/offscreen.html';

  private constructor() {}

  static getInstance(): OffscreenManager {
    if (!OffscreenManager.instance) {
      OffscreenManager.instance = new OffscreenManager();
    }
    return OffscreenManager.instance;
  }

  async hasDocument(): Promise<boolean> {
    const now = Date.now();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    if (this.documentExists && (now - this.lastCheck) < this.CACHE_DURATION) {
      return true;
    }

    try {
      const contexts = await chrome.runtime.getContexts({
        contextTypes: ['OFFSCREEN_DOCUMENT' as chrome.runtime.ContextType]
      });
      
      this.documentExists = contexts.some(context => 
        context.documentUrl?.endsWith(this.DOCUMENT_PATH)
      );
      this.lastCheck = now;
      
      console.log(`[OffscreenManager] Document exists: ${this.documentExists}`);
      return this.documentExists;
    } catch (error) {
      console.error('[OffscreenManager] Error checking document:', error);
      this.documentExists = false;
      return false;
    }
  }

  async ensureDocument(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if (await this.hasDocument()) {
      console.log('[OffscreenManager] Document already exists');
      return;
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
    if (this.isCreating) {
      console.log('[OffscreenManager] Document creation in progress, waiting...');
      while (this.isCreating) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      return;
    }

    this.isCreating = true;
    try {
      console.log('[OffscreenManager] Creating offscreen document...');
      await chrome.offscreen.createDocument({
        url: chrome.runtime.getURL(this.DOCUMENT_PATH),
        reasons: [chrome.offscreen.Reason.DOM_SCRAPING],
        justification: 'Parse DOM content for web page change detection'
      });
      
      this.documentExists = true;
      this.lastCheck = Date.now();
      console.log('[OffscreenManager] Document created successfully');
    } catch (error: any) {
      if (error.message?.includes('Only a single offscreen document')) {
        console.log('[OffscreenManager] Document already exists (caught)');
        this.documentExists = true;
      } else {
        console.error('[OffscreenManager] Failed to create document:', error);
        throw error;
      }
    } finally {
      this.isCreating = false;
    }
  }

  async closeDocument(): Promise<void> {
    if (!(await this.hasDocument())) {
      console.log('[OffscreenManager] No document to close');
      return;
    }

    try {
      await chrome.offscreen.closeDocument();
      this.documentExists = false;
      this.lastCheck = 0;
      console.log('[OffscreenManager] Document closed');
    } catch (error) {
      console.error('[OffscreenManager] Error closing document:', error);
    }
  }

  invalidateCache(): void {
    this.documentExists = false;
    this.lastCheck = 0;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const offscreenManager = OffscreenManager.getInstance();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export async function hasOffscreenDocument(): Promise<boolean> {
  return offscreenManager.hasDocument();
}

export async function ensureOffscreenDocument(): Promise<void> {
  return offscreenManager.ensureDocument();
}

export async function closeOffscreenDocument(): Promise<void> {
  return offscreenManager.closeDocument();
}

export function invalidateCache(): void {
  offscreenManager.invalidateCache();
}

export async function sendMessageToOffscreen(message: any): Promise<any> {
  await ensureOffscreenDocument();
  
  return chrome.runtime.sendMessage({
    target: 'offscreen',
    ...message
  });
}

export async function pingOffscreenDocument(): Promise<boolean> {
  try {
    const response = await sendMessageToOffscreen({ type: 'PING' });
    return response?.status === 'alive';
  } catch {
    return false;
  }
}

export function setupOffscreenEventHandlers(): void {
  chrome.runtime.onStartup.addListener(() => {
    console.log('[OffscreenManager] Browser startup, invalidating cache');
    offscreenManager.invalidateCache();
  });
  
  chrome.runtime.onInstalled.addListener(() => {
    console.log('[OffscreenManager] Extension installed/updated');
    offscreenManager.invalidateCache();
  });
}
EOF

# 2. –°–æ–∑–¥–∞—ë–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏
echo ""
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º–∞—Ñ–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å—é..."

cat > src/utils/semaphore.ts << 'EOF'
/**
 * –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export class Semaphore {
  private permits: number;
  private waiting: Array<() => void> = [];

  constructor(permits: number) {
    this.permits = permits;
  }

  async acquire(): Promise<void> {
    if (this.permits > 0) {
      this.permits--;
      return;
    }

    // –ñ–¥—ë–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
    return new Promise<void>(resolve => {
      this.waiting.push(resolve);
    });
  }

  release(): void {
    this.permits++;
    
    const next = this.waiting.shift();
    if (next) {
      this.permits--;
      next();
    }
  }

  async use<T>(fn: () => Promise<T>): Promise<T> {
    await this.acquire();
    try {
      return await fn();
    } finally {
      this.release();
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è offscreen –æ–ø–µ—Ä–∞—Ü–∏–π
export const offscreenSemaphore = new Semaphore(1);
EOF

# 3. –°–æ–∑–¥–∞—ë–º –æ–±—ë—Ä—Ç–∫—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
echo ""
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π..."

cat > src/background/asyncMessageWrapper.ts << 'EOF'
/**
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 */

type AsyncMessageHandler = (
  request: any,
  sender: chrome.runtime.MessageSender
) => Promise<any>;

/**
 * –°–æ–∑–¥–∞—ë—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
 */
export function createAsyncMessageHandler(
  handlers: Record<string, AsyncMessageHandler>
): (
  request: any,
  sender: chrome.runtime.MessageSender,
  sendResponse: (response?: any) => void
) => boolean | undefined {
  
  return (request, sender, sendResponse) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageType = request?.type || request?.action;
    
    if (!messageType || !(messageType in handlers)) {
      // –ù–µ –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      return false;
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log(`[ASYNC HANDLER] Processing ${messageType}`, request);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    Promise.resolve()
      .then(() => handlers[messageType](request, sender))
      .then(result => {
        console.log(`[ASYNC HANDLER] Success for ${messageType}`, result);
        sendResponse({ success: true, result });
      })
      .catch(error => {
        console.error(`[ASYNC HANDLER] Error for ${messageType}:`, error);
        sendResponse({ 
          success: false, 
          error: error.message || String(error) 
        });
      });

    // –ö–†–ò–¢–ò–ß–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    return true;
  };
}

/**
 * –•–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞
 */
export async function sendMessageAsync<T = any>(message: any): Promise<T> {
  const response = await chrome.runtime.sendMessage(message);
  
  if (!response) {
    throw new Error('No response received');
  }
  
  if (!response.success) {
    throw new Error(response.error || 'Unknown error');
  }
  
  return response.result;
}
EOF

# 4. –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
echo ""
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á..."

cat > src/background/sequentialTaskQueue.ts << 'EOF'
/**
 * –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
 */
import { offscreenSemaphore } from '~/utils/semaphore'
import { sendMessageToOffscreen } from './offscreenManagerFixed'

interface QueueTask {
  id: string;
  url: string;
  selector: string;
}

export class SequentialTaskQueue {
  private queue: QueueTask[] = [];
  private processing = false;
  private readonly MAX_RETRIES = 3;
  private readonly RETRY_DELAY_BASE = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
  private readonly TASK_TIMEOUT = 30000; // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
   */
  private isValidTask(task: any): task is QueueTask {
    return task && 
           typeof task.id === 'string' && 
           typeof task.url === 'string' && 
           typeof task.selector === 'string';
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  async addTask(task: unknown): Promise<void> {
    if (!this.isValidTask(task)) {
      console.error('[TASK QUEUE] Invalid task:', task);
      throw new Error('Invalid task format');
    }

    console.log(`[TASK QUEUE] Adding task ${task.id} to queue`);
    this.queue.push(task);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
    if (!this.processing) {
      this.processQueue();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
   */
  private async processQueue(): Promise<void> {
    if (this.processing) return;
    
    this.processing = true;
    console.log('[TASK QUEUE] Starting queue processing');

    try {
      while (this.queue.length > 0) {
        const task = this.queue.shift()!;
        
        try {
          await this.processTask(task);
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
          await this.delay(1000);
        } catch (error) {
          console.error(`[TASK QUEUE] Failed to process task ${task.id}:`, error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á
        }
      }
    } finally {
      this.processing = false;
      console.log('[TASK QUEUE] Queue processing completed');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   */
  private async processTask(task: QueueTask): Promise<any> {
    console.log(`[TASK QUEUE] Processing task ${task.id}`);

    for (let attempt = 1; attempt <= this.MAX_RETRIES; attempt++) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        return await offscreenSemaphore.use(async () => {
          return await this.executeTaskWithTimeout(task);
        });
      } catch (error) {
        console.warn(`[TASK QUEUE] Attempt ${attempt} failed for task ${task.id}:`, error);
        
        if (attempt < this.MAX_RETRIES) {
          // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
          const delay = this.RETRY_DELAY_BASE * Math.pow(2, attempt - 1);
          const jitter = Math.random() * 1000; // 0-1 —Å–µ–∫—É–Ω–¥–∞ –¥–∂–∏—Ç—Ç–µ—Ä
          await this.delay(delay + jitter);
        } else {
          throw error;
        }
      }
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
   */
  private async executeTaskWithTimeout(task: QueueTask): Promise<any> {
    return Promise.race([
      this.executeTask(task),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Task timeout')), this.TASK_TIMEOUT)
      )
    ]);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ offscreen –¥–æ–∫—É–º–µ–Ω—Ç
   */
  private async executeTask(task: QueueTask): Promise<any> {
    console.log(`[TASK QUEUE] Executing task ${task.id}`);
    
    const response = await sendMessageToOffscreen({
      type: 'PROCESS_URL',
      url: task.url,
      selector: task.selector,
      requestId: task.id
    });

    if (!response.success) {
      throw new Error(response.error || 'Task execution failed');
    }

    return response.content;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
   */
  getStats() {
    return {
      queueLength: this.queue.length,
      isProcessing: this.processing
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const taskQueue = new SequentialTaskQueue();
EOF

# 5. –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–π offscreen –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
echo ""
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ offscreen –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞..."

cat > src/offscreen/offscreenProcessorFixed.js << 'EOF'
/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è offscreen –¥–æ–∫—É–º–µ–Ω—Ç–∞
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∑–∞ —Ä–∞–∑
 */

class OffscreenProcessor {
  constructor() {
    this.currentIframe = null;
    this.processing = false;
    this.setupMessageHandler();
  }

  setupMessageHandler() {
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
      if (request.target !== 'offscreen') {
        return false;
      }

      console.log('[OFFSCREEN] Received message:', request.type);

      switch (request.type) {
        case 'PING':
          sendResponse({ status: 'alive' });
          return false;

        case 'PROCESS_URL':
          this.handleProcessUrl(request, sendResponse);
          return true; // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

        default:
          sendResponse({ error: 'Unknown message type' });
          return false;
      }
    });
  }

  async handleProcessUrl(request, sendResponse) {
    const { url, selector, requestId } = request;

    if (this.processing) {
      sendResponse({ 
        success: false, 
        error: 'Another task is being processed' 
      });
      return;
    }

    this.processing = true;
    try {
      const content = await this.processElement(url, selector);
      sendResponse({ 
        success: true, 
        content,
        requestId,
        timestamp: Date.now()
      });
    } catch (error) {
      console.error('[OFFSCREEN] Processing error:', error);
      sendResponse({ 
        success: false, 
        error: error.message,
        requestId
      });
    } finally {
      this.processing = false;
      this.cleanup();
    }
  }

  async processElement(url, selector) {
    console.log(`[OFFSCREEN] Processing ${url} with selector ${selector}`);
    
    return new Promise((resolve, reject) => {
      const iframe = document.createElement('iframe');
      iframe.style.display = 'none';
      iframe.sandbox = 'allow-scripts allow-same-origin';
      
      this.currentIframe = iframe;
      
      const timeout = setTimeout(() => {
        reject(new Error('Iframe load timeout'));
      }, 20000);

      iframe.onload = () => {
        clearTimeout(timeout);
        
        // –î–∞—ë–º —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        setTimeout(() => {
          try {
            const doc = iframe.contentDocument;
            if (!doc) {
              throw new Error('Cannot access iframe document');
            }

            const element = doc.querySelector(selector);
            if (!element) {
              throw new Error(`Element not found: ${selector}`);
            }

            resolve(element.textContent || element.innerHTML);
          } catch (error) {
            // CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º postMessage
            this.handleCrossOrigin(iframe, selector, resolve, reject);
          }
        }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      };

      iframe.onerror = () => {
        clearTimeout(timeout);
        reject(new Error('Failed to load page'));
      };

      // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
      const cleanUrl = url.split('#')[0];
      iframe.src = cleanUrl;
      
      document.body.appendChild(iframe);
    });
  }

  handleCrossOrigin(iframe, selector, resolve, reject) {
    console.log('[OFFSCREEN] Using postMessage for cross-origin');
    
    const messageHandler = (event) => {
      if (event.source !== iframe.contentWindow) return;
      
      if (event.data.type === 'ELEMENT_CONTENT') {
        window.removeEventListener('message', messageHandler);
        resolve(event.data.content);
      }
    };

    window.addEventListener('message', messageHandler);

    // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ URL
    const script = `
      const element = document.querySelector('${selector}');
      if (element) {
        parent.postMessage({
          type: 'ELEMENT_CONTENT',
          content: element.textContent || element.innerHTML
        }, '*');
      }
    `;

    iframe.src = `javascript:${encodeURIComponent(script)}`;
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è cross-origin
    setTimeout(() => {
      window.removeEventListener('message', messageHandler);
      reject(new Error('Cross-origin timeout'));
    }, 5000);
  }

  cleanup() {
    if (this.currentIframe) {
      this.currentIframe.remove();
      this.currentIframe = null;
    }
  }
}

// –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
const processor = new OffscreenProcessor();

console.log('[OFFSCREEN] Processor initialized');
EOF

# 6. –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
echo ""
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."

cat > src/background/fixedIntegration.ts << 'EOF'
/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */
import { createAsyncMessageHandler } from './asyncMessageWrapper'
import { getMonitoringStats, getPerformanceStats } from './monitor'
import { taskQueue } from './sequentialTaskQueue'

// –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
const messageHandlers = {
  'get-monitoring-stats': async () => {
    return await getMonitoringStats();
  },
  
  'get-performance-stats': async () => {
    const queueStats = taskQueue.getStats();
    const perfStats = await getPerformanceStats();
    
    return {
      ...perfStats,
      queue: queueStats
    };
  },
  
  'check-element': async (request: any) => {
    const { task } = request;
    await taskQueue.addTask(task);
    return { queued: true };
  }
};

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
export function setupFixedMessageHandling(): void {
  console.log('[INTEGRATION] Setting up fixed message handling');
  
  const handler = createAsyncMessageHandler(messageHandlers);
  chrome.runtime.onMessage.addListener(handler);
  
  console.log('[INTEGRATION] Message handling ready');
}
EOF

# 7. –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
echo ""
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏..."

cat > ARCHITECTURE_FIX_INSTRUCTIONS.md << 'EOF'
# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π

## –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:

1. **OffscreenManager** - Singleton –ø–∞—Ç—Ç–µ—Ä–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω offscreen –¥–æ–∫—É–º–µ–Ω—Ç
2. **–°–µ–º–∞—Ñ–æ—Ä** - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
3. **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å return true
4. **–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å** - –ó–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –æ–¥–Ω–æ–π
5. **–í–∞–ª–∏–¥–∞—Ü–∏—è** - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º

## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:

### 1. –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ä—ã–π offscreenManager:
```typescript
// –í src/background/index.ts
import { setupOffscreenEventHandlers } from './offscreenManagerFixed'
import { setupFixedMessageHandling } from './fixedIntegration'

// –í–º–µ—Å—Ç–æ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
setupFixedMessageHandling();
setupOffscreenEventHandlers();
```

### 2. –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ä—ã–π offscreen.js:
```bash
cp src/offscreen/offscreenProcessorFixed.js src/offscreen/offscreen.js
```

### 3. –û–±–Ω–æ–≤–∏—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –≤ reliabilityManager.ts:
```typescript
import { 
  ensureOffscreenDocument, 
  hasOffscreenDocument, 
  closeOffscreenDocument, 
  pingOffscreenDocument, 
  invalidateCache 
} from './offscreenManagerFixed'
```

### 4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å –≤ monitor:
```typescript
import { taskQueue } from '../sequentialTaskQueue'

// –í–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏
await taskQueue.addTask({
  id: task.id,
  url: task.url,
  selector: task.selector
});
```

## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:

```javascript
// –í –∫–æ–Ω—Å–æ–ª–∏ Service Worker
chrome.runtime.sendMessage({type: 'get-monitoring-stats'})
  .then(console.log)
  .catch(console.error)

// –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –æ—à–∏–±–æ–∫
```

## –í–∞–∂–Ω–æ:

- –í—Å–µ –∑–∞–¥–∞—á–∏ —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
- –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω iframe –∞–∫—Ç–∏–≤–µ–Ω –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CORS —á–µ—Ä–µ–∑ postMessage
EOF

echo ""
echo "‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã!"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "  1. –ò–∑—É—á–∏—Ç–µ ARCHITECTURE_FIX_INSTRUCTIONS.md"
echo "  2. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
echo "  3. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: ./build.sh"
echo "  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
echo ""
echo "‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
echo "  - –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω offscreen –¥–æ–∫—É–º–µ–Ω—Ç (Singleton)"
echo "  - –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á"
echo "  - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
echo "  - –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"
