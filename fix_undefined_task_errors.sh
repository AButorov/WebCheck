#!/bin/zsh

# –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
chmod +x "$0"

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å undefined task.id

echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ TypeError: Cannot read properties of undefined (reading 'id')"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [[ ! -f "src/background/monitor/index.ts" ]]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

echo "üìÅ –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."

# –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
cp src/background/monitor/index.ts src/background/monitor/index.ts.backup
echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: src/background/monitor/index.ts.backup"

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Ñ–∞–π–ª—É monitor/index.ts
cat > src/background/monitor/index.ts << 'EOF'
/**
 * –°–∏—Å—Ç–µ–º–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è Web Check
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * 1. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 * 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
 * 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
 * 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 * 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 */

import browser from 'webextension-polyfill'
import { WebCheckTask, TaskInterval } from '~/types/task'
import { getStorageLocal, setStorageLocal } from '~/utils/browser-storage'
import { CHECK_INTERVALS, NOTIFICATION_TYPES, NOTIFICATION_TIMEOUT } from '~/utils/constants'
import { checkElement } from './element-checker'
import { updateBadge } from './badge'
import { ensureOffscreenDocument } from '../offscreenManager'
import { addTaskToQueue, getQueueStats, isTaskInQueue } from '../taskQueue'
import { initReliabilityManager, withReliability, registerActivity, getReliabilityState, performDiagnostics } from '../reliabilityManager'

// –ò–º—è –∞–ª–∞—Ä–º–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
const CHECK_ALARM_NAME = 'web-check-monitor'

// –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
const MAX_CONCURRENT_CHECKS = 3

// –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
let checkQueue: string[] = []

// –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
let isChecking = false

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
export function initMonitor() {
  console.log('[MONITOR] Initializing background monitoring system')
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
  initReliabilityManager()
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
  setupAlarm()
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–ª–∞—Ä–º–∞
  browser.alarms.onAlarm.addListener(handleAlarm)
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  browser.runtime.onStartup.addListener(handleBrowserStartup)
  
  // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  updateBadgeFromStorage()
  
  console.log('[MONITOR] Background monitoring system initialized')
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–∞—Ä–º–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
 */
function setupAlarm() {
  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–ª–∞—Ä–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  browser.alarms.clear(CHECK_ALARM_NAME).then(() => {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–ª–∞—Ä–º —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 1 –º–∏–Ω—É—Ç—É
    browser.alarms.create(CHECK_ALARM_NAME, {
      periodInMinutes: 1
    })
    console.log('[MONITOR] Alarm scheduled for periodic checks')
  })
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–∞—Ä–º–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á
 */
async function handleAlarm(alarm: browser.Alarms.Alarm) {
  if (alarm.name === CHECK_ALARM_NAME) {
    console.log('[MONITOR] Alarm triggered, checking for tasks to update')
    await checkDueTasksForUpdates()
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
 */
async function handleBrowserStartup() {
  console.log('[MONITOR] Browser started, resuming monitoring')
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
  const tasks = await getStorageLocal('tasks', [] as WebCheckTask[])
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
  const validTasks = tasks.filter(task => task && typeof task === 'object' && task.id)
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  updateBadgeFromTasks(validTasks)
  
  console.log(`[MONITOR] Loaded ${validTasks.length} valid tasks from storage`)
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export async function checkDueTasksForUpdates() {
  if (isChecking) {
    console.log('[MONITOR] Check already in progress, skipping')
    return
  }
  
  console.log('[MONITOR] Checking for tasks due for update')
  isChecking = true
  
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
    registerActivity()
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ offscreen-–¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
    try {
      await withReliability(async () => {
        await ensureOffscreenDocument()
        console.log('[MONITOR] Offscreen document ready for monitoring')
      })
    } catch (error) {
      console.warn('[MONITOR] Failed to ensure offscreen document, monitoring will use fallback:', error)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É - element-checker –∏–º–µ–µ—Ç fallback
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const tasks = await getStorageLocal('tasks', [] as WebCheckTask[])
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tasks –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(tasks)) {
      console.error('[MONITOR] Tasks is not an array:', tasks)
      isChecking = false
      return
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const validTasks = tasks.filter(task => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ task —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
      if (!task || typeof task !== 'object' || !task.id) {
        console.warn('[MONITOR] Invalid task found and filtered out:', task)
        return false
      }
      return true
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –∑–∞–¥–∞—á–∏
    const now = Date.now()
    const tasksToCheck = validTasks.filter(task => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
      if (task.status === 'paused') {
        return false
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      const intervalMs = getIntervalInMs(task.interval)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      return now - (task.lastCheckedAt || 0) >= intervalMs
    })
    
    if (tasksToCheck.length > 0) {
      console.log(`[MONITOR] Found ${tasksToCheck.length} tasks to check`)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π
      await processTasksWithQueue(tasksToCheck)
    } else {
      console.log('[MONITOR] No tasks due for update')
      isChecking = false
    }
  } catch (error) {
    console.error('[MONITOR] Error checking tasks for updates:', error)
    isChecking = false
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π
 */
async function processTasksWithQueue(tasks: WebCheckTask[]): Promise<void> {
  console.log(`[MONITOR] Processing ${tasks.length} tasks through queue system`)
  
  const checkPromises = tasks.map(async (task) => {
    try {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏
      if (!task || !task.id) {
        console.warn('[MONITOR] Skipping invalid task:', task)
        return
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
      if (isTaskInQueue(task.id)) {
        console.log(`[MONITOR] Task ${task.id} already in queue, skipping`)
        return
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
      const result = await addTaskToQueue(task, 3)
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await handleTaskResult(task, result)
      
    } catch (error) {
      console.error(`[MONITOR] Error processing task ${task?.id || 'unknown'}:`, error)
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–∞—è –∑–∞–¥–∞—á–∞
      if (task && task.id) {
        await handleTaskError(task, error instanceof Error ? error.message : String(error))
      }
    }
  })
  
  // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
  await Promise.all(checkPromises)
  
  console.log('[MONITOR] All tasks processed')
  isChecking = false
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏
 */
async function handleTaskResult(task: WebCheckTask, result: { html?: string; error?: string; taskId: string; timestamp: number }): Promise<void> {
  if (!task || !task.id) {
    console.error('[MONITOR] Cannot handle result for invalid task:', task)
    return
  }
  
  console.log(`[MONITOR] Handling result for task: ${task.id}`)
  
  const now = Date.now()
  const updates: Partial<WebCheckTask> = {
    lastCheckedAt: now
  }
  
  if (result.html) {
    // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω HTML
    updates.consecutiveErrors = 0
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const hasChanges = result.html !== (task.currentHtml || '')
    
    if (hasChanges) {
      console.log(`[MONITOR] Changes detected for task: ${task.id}`)
      updates.status = 'changed'
      updates.currentHtml = result.html
      updates.lastChangedAt = now
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      showNotification(task, result.html)
    } else if (task.status === 'error') {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
      updates.status = 'active'
    }
  } else {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
    await handleTaskError(task, result.error || 'Unknown error')
    return
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  await updateTask(task.id, updates)
  updateBadgeFromStorage()
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∏
 */
async function handleTaskError(task: WebCheckTask, error: string): Promise<void> {
  if (!task || !task.id) {
    console.error('[MONITOR] Cannot handle error for invalid task:', task)
    return
  }
  
  console.error(`[MONITOR] Handling error for task ${task.id}:`, error)
  
  const now = Date.now()
  const currentConsecutiveErrors = task.consecutiveErrors || 0
  
  const updates: Partial<WebCheckTask> = {
    lastCheckedAt: now,
    lastError: error,
    lastErrorTime: now,
    consecutiveErrors: currentConsecutiveErrors + 1
  }
  
  // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
  if (updates.consecutiveErrors >= 5) {
    updates.status = 'error'
  }
  
  await updateTask(task.id, updates)
  updateBadgeFromStorage()
}

/**
 * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
 */
function showNotification(task: WebCheckTask, newHtml: string) {
  if (!task || !task.id) {
    console.error('[MONITOR] Cannot show notification for invalid task:', task)
    return
  }
  
  // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  try {
    browser.notifications.create(`webcheck-${task.id}`, {
      type: 'basic',
      iconUrl: browser.runtime.getURL('icons/icon-changed-48.png'), // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å –±–µ–∑ 'assets/'
      title: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è',
      message: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ "${task.title || 'Unknown'}" –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞`,
      priority: 2
    }).catch(error => {
      console.error('[MONITOR] Error showing notification:', error)
    })
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
    browser.notifications.onClicked.addListener((notificationId) => {
      if (notificationId === `webcheck-${task.id}`) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        browser.tabs.create({
          url: browser.runtime.getURL(`src/ui/popup/pages/ViewChanges.html?id=${task.id}`)
        }).catch(error => {
          console.error('[MONITOR] Error opening view changes page:', error)
        })
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        browser.notifications.clear(notificationId).catch(() => {})
      }
    })
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    setTimeout(() => {
      browser.notifications.clear(`webcheck-${task.id}`).catch(() => {})
    }, NOTIFICATION_TIMEOUT)
  } catch (error) {
    console.error('[MONITOR] Error in showNotification:', error)
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 */
async function updateTask(taskId: string, updates: Partial<WebCheckTask>) {
  if (!taskId) {
    console.error('[MONITOR] Cannot update task: invalid taskId')
    return
  }
  
  try {
    const tasks = await getStorageLocal('tasks', [] as WebCheckTask[])
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tasks –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(tasks)) {
      console.error('[MONITOR] Tasks is not an array in updateTask:', tasks)
      return
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    const updatedTasks = tasks.map(task => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –µ—ë —Å–≤–æ–π—Å—Ç–≤–∞–º
      if (task && typeof task === 'object' && task.id === taskId) {
        return { ...task, ...updates }
      }
      return task
    }).filter(task => task && typeof task === 'object' && task.id) // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–¥–∞—á–∏
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    await setStorageLocal('tasks', updatedTasks)
    console.log(`[MONITOR] Task ${taskId} updated successfully`)
  } catch (error) {
    console.error(`[MONITOR] Error updating task ${taskId}:`, error)
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */
function getIntervalInMs(interval: TaskInterval): number {
  switch (interval) {
    case '10s':
      return CHECK_INTERVALS.TEN_SECONDS.milliseconds
    case '15m':
      return CHECK_INTERVALS.FIFTEEN_MINUTES.milliseconds
    case '1h':
      return CHECK_INTERVALS.ONE_HOUR.milliseconds
    case '3h':
      return CHECK_INTERVALS.THREE_HOURS.milliseconds
    case '1d':
      return CHECK_INTERVALS.ONE_DAY.milliseconds
    default:
      return CHECK_INTERVALS.ONE_HOUR.milliseconds
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 */
async function updateBadgeFromStorage() {
  const tasks = await getStorageLocal('tasks', [] as WebCheckTask[])
  // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–¥–∞—á–∏
  const validTasks = tasks.filter(task => task && typeof task === 'object' && task.id)
  updateBadgeFromTasks(validTasks)
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
 */
function updateBadgeFromTasks(tasks: WebCheckTask[]) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tasks - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á
  if (!Array.isArray(tasks)) {
    console.warn('[MONITOR] updateBadgeFromTasks: tasks is not an array')
    return
  }
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
  const changedTasksCount = tasks.filter(task => 
    task && typeof task === 'object' && task.status === 'changed'
  ).length
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂
  updateBadge(changedTasksCount)
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤)
 */
export function stopMonitor(): void {
  console.log('[MONITOR] Stopping background monitoring system')
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–ª–∞—Ä–º
  browser.alarms.clear(CHECK_ALARM_NAME)
  
  // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏
  isChecking = false
  checkQueue = []
  
  console.log('[MONITOR] Background monitoring system stopped')
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export async function getPerformanceStats(): Promise<{
  queueLength: number
  isProcessing: boolean
  averageProcessingTime: number
  successRate: number
  recoveryCount: number
  systemHealth: 'healthy' | 'degraded' | 'critical'
}> {
  const queueStats = getQueueStats()
  const reliabilityState = getReliabilityState()
  
  // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const totalProcessed = queueStats.stats.totalProcessed
  const successRate = totalProcessed > 0 
    ? Math.round((queueStats.stats.totalSuccessful / totalProcessed) * 100)
    : 100
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
  let systemHealth: 'healthy' | 'degraded' | 'critical' = 'healthy'
  
  if (!reliabilityState.isHealthy || reliabilityState.consecutiveErrors > 3) {
    systemHealth = 'critical'
  } else if (successRate < 80 || reliabilityState.consecutiveErrors > 1) {
    systemHealth = 'degraded'
  }
  
  return {
    queueLength: queueStats.queueLength,
    isProcessing: queueStats.isProcessing,
    averageProcessingTime: queueStats.stats.averageProcessingTime,
    successRate,
    recoveryCount: reliabilityState.totalRecoveries,
    systemHealth
  }
}

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ offscreen API
 */
export async function testOffscreenMonitoring(url: string, selector: string): Promise<{
  success: boolean
  duration: number
  contentLength?: number
  contentPreview?: string
  error?: string
  queuePosition?: number
}> {
  console.log(`[MONITOR:TEST] Testing offscreen monitoring for ${url} with selector ${selector}`)
  
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    registerActivity()
    
    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    const testTask: WebCheckTask = {
      id: `test_${Date.now()}`,
      title: 'Test Task',
      url,
      selector,
      interval: '15m',
      status: 'active',
      createdAt: Date.now(),
      lastCheckedAt: 0,
      currentHtml: ''
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
    const queuePosition = isTaskInQueue(testTask.id) ? getQueueStats().queueLength + 1 : 1
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–µ–π
    const startTime = Date.now()
    const result = await addTaskToQueue(testTask, 2)
    const duration = Date.now() - startTime
    
    console.log(`[MONITOR:TEST] Test completed in ${duration}ms`)
    
    if (result.html) {
      console.log(`[MONITOR:TEST] Success: Found element (${result.html.length} characters)`)
      const preview = result.html.substring(0, 200)
      console.log(`[MONITOR:TEST] Content preview: ${preview}...`)
      
      return {
        success: true,
        duration,
        contentLength: result.html.length,
        contentPreview: preview,
        queuePosition
      }
    } else {
      console.error(`[MONITOR:TEST] Error: ${result.error}`)
      return {
        success: false,
        duration,
        error: result.error,
        queuePosition
      }
    }
    
  } catch (error) {
    console.error('[MONITOR:TEST] Test failed:', error)
    return {
      success: false,
      duration: 0,
      error: error instanceof Error ? error.message : String(error)
    }
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
export async function getMonitoringStats(): Promise<{
  tasksTotal: number
  tasksActive: number
  tasksPaused: number
  tasksWithChanges: number
  tasksWithErrors: number
  offscreenReady: boolean
  queueStats: ReturnType<typeof getQueueStats>
  reliabilityState: ReturnType<typeof getReliabilityState>
  diagnostics: Awaited<ReturnType<typeof performDiagnostics>>
}> {
  const tasks = await getStorageLocal('tasks', [] as WebCheckTask[])
  const validTasks = tasks.filter(task => task && typeof task === 'object' && task.id)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ offscreen-–¥–æ–∫—É–º–µ–Ω—Ç–∞
  let offscreenReady = false
  try {
    await ensureOffscreenDocument()
    offscreenReady = true
  } catch {
    offscreenReady = false
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
  const queueStats = getQueueStats()
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
  const reliabilityState = getReliabilityState()
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
  const diagnostics = await performDiagnostics()
  
  return {
    tasksTotal: validTasks.length,
    tasksActive: validTasks.filter(t => t.status === 'active').length,
    tasksPaused: validTasks.filter(t => t.status === 'paused').length,
    tasksWithChanges: validTasks.filter(t => t.status === 'changed').length,
    tasksWithErrors: validTasks.filter(t => t.status === 'error').length,
    offscreenReady,
    queueStats,
    reliabilityState,
    diagnostics
  }
}

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
export async function forceCheckTask(taskId: string): Promise<{
  success: boolean
  result?: any
  error?: string
  duration: number
}> {
  const startTime = Date.now()
  
  try {
    const tasks = await getStorageLocal('tasks', [] as WebCheckTask[])
    const task = tasks.find(t => t && t.id === taskId)
    
    if (!task || !task.id) {
      throw new Error(`Task ${taskId} not found`)
    }
    
    console.log(`[MONITOR:FORCE] Force checking task ${taskId}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
    if (isTaskInQueue(taskId)) {
      throw new Error('Task is already in queue')
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    const result = await addTaskToQueue(task, 1)
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await handleTaskResult(task, result)
    
    const duration = Date.now() - startTime
    
    return {
      success: true,
      result,
      duration
    }
    
  } catch (error) {
    const duration = Date.now() - startTime
    console.error('[MONITOR:FORCE] Force check failed:', error)
    
    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
      duration
    }
  }
}
EOF

echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ src/background/monitor/index.ts"

echo ""
echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:"
echo "1. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ task.id"
echo "2. ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –º–∞—Å—Å–∏–≤–∞"
echo "3. ‚úÖ –ó–∞—â–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"
echo "4. ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ undefined –∑–Ω–∞—á–µ–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ –∑–∞–¥–∞—á"
echo "5. ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"

echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É: ./build.sh"
echo "2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ Chrome"
echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å Service Worker –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫"

echo ""
echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
