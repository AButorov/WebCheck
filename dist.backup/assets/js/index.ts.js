var f=Object.defineProperty;var o=(t,e)=>f(t,"name",{value:e,configurable:!0});chrome.runtime.onMessage.addListener((t,e,n)=>(console.log("[Background] Received message:",t.action),t.action==="ping"?(n({status:"pong"}),!0):(k(t,e).then(n).catch(r=>{console.error("[Background] Error handling message:",r),n({error:r.message})}),!0)));async function k(t,e){try{switch(t.action){case"test":return{success:!0,message:"Background script работает!"};case"contentScriptReady":return console.log("[Background] Content script ready in tab:",e.tab?.id),{status:"acknowledged"};case"activateElementSelection":return await w(t.tabId);case"captureElement":return await y(t.elementInfo);default:return console.log("[Background] Unknown action:",t.action),{error:"Unknown action"}}}catch(n){throw console.error("[Background] Error handling message:",n),n}}o(k,"handleMessage");async function w(t){if(!t)throw new Error("Tab ID is required for element selection");console.log(`[Background] Activating element selection for tab ${t}`);try{const e=await chrome.tabs.get(t);if(!e.url||h(e.url))throw new Error(`Cannot activate element selection on system URL: ${e.url}`);if(!await g(t)&&(console.log("[Background] Content script not ready, injecting..."),await v(t),await x(500),!await g(t)))throw new Error("Content script not ready after injection");const r=await m(t,{action:"activateElementSelection"});return console.log("[Background] Element selection activated successfully:",r),{success:!0,response:r}}catch(e){throw console.error("[Background] Error activating element selection:",e),e}}o(w,"handleElementSelection");async function y(t){console.log("[Background] Element captured:",t);try{const e={id:b(),url:t.pageUrl,title:t.pageTitle||"Без названия",selector:t.selector,interval:"1h",isActive:!0,createdAt:new Date().toISOString(),lastCheck:null,lastContent:null,history:[],elementInfo:t};return console.log("[Background] Created task from element:",e),await chrome.storage.local.set({newTaskData:e}),console.log("[Background] Task data saved to storage as newTaskData"),{success:!0,message:"Element captured and task created successfully",taskId:e.id}}catch(e){throw console.error("[Background] Error handling element capture:",e),e}}o(y,"handleElementCapture");function b(){return"task_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)}o(b,"generateTaskId");async function g(t,e=3e3){try{const n=await m(t,{action:"ping"},e);return n&&n.status==="pong"}catch(n){return console.log(`[Background] Content script not ready in tab ${t}:`,n),!1}}o(g,"checkContentScriptReady");async function m(t,e,n=5e3){return Promise.race([chrome.tabs.sendMessage(t,e),new Promise((r,a)=>setTimeout(()=>a(new Error("Message timeout")),n))])}o(m,"sendMessageToTab");async function v(t){try{const e=await chrome.tabs.get(t);if(!e.url||h(e.url))throw new Error(`Cannot inject into system URL: ${e.url}`);try{await chrome.scripting.executeScript({target:{tabId:t},files:["content-script/index-legacy.js"]}),console.log(`[Background] Content script injected successfully into tab ${t}`)}catch(n){console.log("[Background] Failed to inject main script, trying fallback:",n),await chrome.scripting.executeScript({target:{tabId:t},func:E}),console.log(`[Background] Fallback content script injected into tab ${t}`)}}catch(e){throw console.error(`[Background] Failed to inject content script into tab ${t}:`,e),e}}o(v,"injectContentScript");function h(t){return["chrome://","chrome-extension://","moz-extension://","edge://","about:","data:","file:","devtools://"].some(e=>t.startsWith(e))}o(h,"isSystemUrl");function E(){if(console.log("[Background:Fallback] Fallback content script loaded"),window.webCheckContentScriptLoaded){console.log("[Background:Fallback] Main content script already loaded");return}window.webCheckContentScriptLoaded=!0,chrome.runtime.onMessage.addListener((e,n,r)=>(console.log("[Background:Fallback] Received message:",e.action),e.action==="ping"?(r({status:"pong"}),!0):e.action==="activateElementSelection"?(t(),r({status:"activated"}),!0):!1));function t(){let e=null;const n=document.createElement("div");n.style.cssText=`
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0,0,0,0.3);
      z-index: 2147483647;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: Arial, sans-serif;
    `;const r=document.createElement("div");r.style.cssText=`
      background: white;
      padding: 20px;
      border-radius: 8px;
      text-align: center;
      box-shadow: 0 4px 20px rgba(0,0,0,0.3);
      max-width: 400px;
    `,r.innerHTML=`
      <h3 style="margin-top: 0; color: #333;">Выберите элемент</h3>
      <p style="color: #666; margin-bottom: 20px;">Наведите курсор и кликните на элемент для отслеживания</p>
      <button id="webcheck-cancel" style="padding: 8px 16px; background: #f5f5f5; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">Отмена</button>
    `,n.appendChild(r),document.body.appendChild(n);const a=document.createElement("style");a.textContent=`
      .webcheck-highlight {
        outline: 2px solid #4285f4 !important;
        outline-offset: 2px !important;
        background-color: rgba(66, 133, 244, 0.1) !important;
      }
    `,document.head.appendChild(a);function l(i){e&&e.classList.remove("webcheck-highlight");const c=document.elementFromPoint(i.clientX,i.clientY);c&&!c.closest('div[style*="z-index: 2147483647"]')&&(e=c,e.classList.add("webcheck-highlight"))}o(l,"handleMouseMove");function d(i){if(i.preventDefault(),i.stopPropagation(),e&&!e.closest('div[style*="z-index: 2147483647"]')){const c=e.getBoundingClientRect(),p={selector:e.id?`#${e.id}`:e.tagName.toLowerCase()+(e.className?`.${e.className.split(" ").join(".")}`:""),rect:{top:c.top+window.pageYOffset,left:c.left+window.pageXOffset,width:c.width,height:c.height},html:e.outerHTML.substring(0,1e3),pageTitle:document.title,pageUrl:window.location.href};chrome.runtime.sendMessage({action:"captureElement",elementInfo:p}),s()}}o(d,"handleClick");function s(){document.removeEventListener("mousemove",l),document.removeEventListener("click",d),e&&e.classList.remove("webcheck-highlight"),n.remove(),a.remove()}o(s,"cleanup"),document.addEventListener("mousemove",l),document.addEventListener("click",d);const u=document.getElementById("webcheck-cancel");u&&u.addEventListener("click",s),setTimeout(s,3e4)}o(t,"activateSimpleElementPicker")}o(E,"createFallbackContentScript");function x(t){return new Promise(e=>setTimeout(e,t))}o(x,"delay");chrome.runtime.onInstalled.addListener(async t=>{console.log(`[Background] Extension installed, reason: ${t.reason}`),t.reason==="install"&&console.log("[Background] Web Check extension installed successfully")});chrome.runtime.onStartup.addListener(()=>{console.log("[Background] Extension startup")});console.log("[Background] Service worker initialized successfully");
