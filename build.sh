#!/bin/zsh
set -euo pipefail

# ================================================================
# Web Check - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ (Manifest V3)
# –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
# ================================================================

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
typeset MODE="production"
typeset CSP_COMPATIBLE=true
typeset DEBUG=false
typeset GENERATE_ICONS=false
typeset FORCE_CLEAN=false
typeset VALIDATE_ONLY=false

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
for arg in "$@"; do
  case $arg in
  dev)
    MODE="development"
    CSP_COMPATIBLE=false
    ;;
  debug)
    MODE="development"
    DEBUG=true
    ;;
  icons)
    GENERATE_ICONS=true
    ;;
  clean)
    FORCE_CLEAN=true
    ;;
  validate)
    VALIDATE_ONLY=true
    ;;
  --help|-h)
    print_help
    exit 0
    ;;
  *)
    print -P "${RED}–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: %s${NC}" "$arg"
    print_help
    exit 1
    ;;
  esac
done

print_help() {
  print -P "${CYAN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]${NC}"
  print -P ""
  print -P "${YELLOW}–û–ø—Ü–∏–∏:${NC}"
  print -P "  dev        –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–±–µ–∑ –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏)"
  print -P "  debug      –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"
  print -P "  icons      –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫"
  print -P "  clean      –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π"
  print -P "  validate   –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ —Å–±–æ—Ä–∫–∏"
  print -P "  --help/-h  –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
  print -P ""
  print -P "${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
  print -P "  $0                # –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞"
  print -P "  $0 dev            # –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
  print -P "  $0 dev icons      # –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫"
  print -P "  $0 clean          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ + —Å–±–æ—Ä–∫–∞"
}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
print_header() {
  print -P "${BLUE}================================================================${NC}"
  print -P "${BLUE}    Web Check - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏ v2.0               ${NC}"
  print -P "${BLUE}    –†–µ–∂–∏–º: $MODE | CSP: $CSP_COMPATIBLE | –û—Ç–ª–∞–¥–∫–∞: $DEBUG${NC}"
  print -P "${BLUE}================================================================${NC}"
}

# ================================
# –ü–†–û–í–ï–†–ö–ò –ò –ü–û–î–ì–û–¢–û–í–ö–ê
# ================================

check_requirements() {
  print -P "\n${CYAN}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...${NC}"

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
  if ! command -v node >/dev/null 2>&1; then
    print -P "${RED}‚ùå –û—à–∏–±–∫–∞: Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    print -P "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js: https://nodejs.org/${NC}"
    exit 1
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Node.js
  typeset node_version=$(node -v | cut -d'v' -f2)
  if ((${node_version%%.*} < 18)); then
    print -P "${RED}‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è Node.js ‚â•18. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: %s${NC}" "$node_version"
    exit 1
  fi
  print -P "${GREEN}‚úÖ Node.js: v%s${NC}" "$node_version"

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  local pkg_manager=""
  if command -v pnpm >/dev/null 2>&1; then
    pkg_manager="pnpm"
    print -P "${GREEN}‚úÖ pnpm: %s${NC}" "$(pnpm --version)"
  elif command -v npm >/dev/null 2>&1; then
    pkg_manager="npm"
    print -P "${YELLOW}‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è npm –≤–º–µ—Å—Ç–æ pnpm${NC}"
  else
    print -P "${RED}‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (pnpm/npm)${NC}"
    exit 1
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  if [[ ! -d "node_modules" || -z "$(ls -A node_modules 2>/dev/null)" ]]; then
    print -P "${YELLOW}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    $pkg_manager install
  fi
  print -P "${GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã${NC}"

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  if command -v jq >/dev/null 2>&1; then
    print -P "${GREEN}‚úÖ jq: –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON${NC}"
  else
    print -P "${YELLOW}‚ö†Ô∏è jq –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω sed)${NC}"
  fi
}

check_project_structure() {
  print -P "\n${CYAN}üèóÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
  typeset -i errors=0

  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
  local required_files=(
    "src/manifest.ts"
    "vite.config.ts"
    "package.json"
    "src/ui/popup/index.html"
    "src/content-script/index-legacy.js"
    "src/offscreen/offscreen.html"
    "src/offscreen/offscreen.js"
  )

  for file in $required_files; do
    if [[ ! -f $file ]]; then
      print -P "${RED}‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: %s${NC}" "$file"
      ((errors++))
    else
      [[ "$DEBUG" == "true" ]] && print -P "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω: %s${NC}" "$file"
    fi
  done

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  local required_dirs=(
    "src/background"
    "src/ui/popup"
    "src/ui/options"
    "src/components"
    "src/stores"
  )

  for dir in $required_dirs; do
    if [[ ! -d $dir ]]; then
      print -P "${YELLOW}‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s${NC}" "$dir"
    else
      [[ "$DEBUG" == "true" ]] && print -P "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–∞: %s${NC}" "$dir"
    fi
  done

  if ((errors > 0)); then
    print -P "${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: %d${NC}" "$errors"
    exit 1
  fi
  print -P "${GREEN}‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
}

# ================================
# –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ö–û–ù–û–ö
# ================================

generate_icons() {
  print -P "\n${CYAN}üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ–∫...${NC}"

  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  mkdir -p "public/icons"

  # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö SVG-–∏–∫–æ–Ω–æ–∫ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if [[ ! -f "public/icons/icon.svg" ]]; then
    cat >"public/icons/icon.svg" <<'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<svg width="128" height="128" viewBox="0 0 128 128" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#4285F4;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#34A853;stop-opacity:1" />
    </linearGradient>
  </defs>
  <rect width="128" height="128" fill="white" rx="16"/>
  <rect x="12" y="12" width="104" height="104" rx="12" fill="url(#gradient)"/>
  <path d="M85.3,42.7l-28,28l-14.7-14.7l-5.3,5.3l20,20l33.3-33.3L85.3,42.7z" fill="white" stroke="white" stroke-width="2"/>
</svg>
EOF
    print -P "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è SVG –∏–∫–æ–Ω–∫–∞${NC}"
  fi

  if [[ ! -f "public/icons/icon-changed.svg" ]]; then
    cat >"public/icons/icon-changed.svg" <<'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<svg width="128" height="128" viewBox="0 0 128 128" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="gradient-changed" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#EA4335;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#FBBC04;stop-opacity:1" />
    </linearGradient>
  </defs>
  <rect width="128" height="128" fill="white" rx="16"/>
  <rect x="12" y="12" width="104" height="104" rx="12" fill="url(#gradient-changed)"/>
  <path d="M85.3,42.7l-28,28l-14.7-14.7l-5.3,5.3l20,20l33.3-33.3L85.3,42.7z" fill="white" stroke="white" stroke-width="2"/>
  <circle cx="96" cy="32" r="12" fill="#FF4444"/>
  <text x="96" y="37" text-anchor="middle" fill="white" font-size="16" font-weight="bold">!</text>
</svg>
EOF
    print -P "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω–∞ SVG –∏–∫–æ–Ω–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π${NC}"
  fi

  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PNG
  local convert_cmd=""
  if command -v magick &>/dev/null; then
    convert_cmd="magick"
  elif command -v convert &>/dev/null; then
    convert_cmd="convert"
  fi

  if [[ -n "$convert_cmd" ]]; then
    print -P "${CYAN}üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ PNG...${NC}"
    for SIZE in 16 32 48 128; do
      if [[ "$convert_cmd" == "magick" ]]; then
        magick "public/icons/icon.svg" -background none -resize ${SIZE}x${SIZE} "public/icons/icon-$SIZE.png" 2>/dev/null
        magick "public/icons/icon-changed.svg" -background none -resize ${SIZE}x${SIZE} "public/icons/icon-changed-$SIZE.png" 2>/dev/null
      else
        convert -background none -resize ${SIZE}x${SIZE} "public/icons/icon.svg" "public/icons/icon-$SIZE.png" 2>/dev/null
        convert -background none -resize ${SIZE}x${SIZE} "public/icons/icon-changed.svg" "public/icons/icon-changed-$SIZE.png" 2>/dev/null
      fi
    done
    print -P "${GREEN}‚úÖ PNG –∏–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã${NC}"
  else
    print -P "${YELLOW}‚ö†Ô∏è ImageMagick –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É–µ–º SVG –∫–∞–∫ PNG${NC}"
    for SIZE in 16 32 48 128; do
      cp "public/icons/icon.svg" "public/icons/icon-$SIZE.png"
      cp "public/icons/icon-changed.svg" "public/icons/icon-changed-$SIZE.png"
    done
  fi
}

check_icons() {
  print -P "\n${CYAN}üñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–æ–∫...${NC}"
  local missing=0

  for SIZE in 16 32 48 128; do
    if [[ ! -f "public/icons/icon-$SIZE.png" ]]; then
      ((missing++))
    fi
  done

  if ((missing > 0)); then
    if [[ "$GENERATE_ICONS" == "true" ]]; then
      generate_icons
    else
      print -P "${YELLOW}‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç $missing –∏–∫–æ–Ω–æ–∫. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? (y/n) ${NC}"
      read -r response
      if [[ "$response" =~ ^[Yy]$ ]]; then
        generate_icons
      else
        print -P "${YELLOW}‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫${NC}"
      fi
    fi
  else
    print -P "${GREEN}‚úÖ –í—Å–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω—ã${NC}"
  fi
}

# ================================
# –°–ë–û–†–ö–ê –ü–†–û–ï–ö–¢–ê
# ================================

cleanup_build() {
  print -P "\n${CYAN}üßπ –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π...${NC}"
  
  # –°–æ–∑–¥–∞–µ–º backup dist –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
  if [[ -d "dist" && -f "dist/manifest.json" ]]; then
    print -P "${YELLOW}üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–±–æ—Ä–∫–∏...${NC}"
    rm -rf dist.backup 2>/dev/null || true
    mv dist dist.backup
  fi
  
  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
  rm -rf dist
  rm -rf node_modules/.cache 2>/dev/null || true
  rm -rf .output 2>/dev/null || true
  
  # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  find . -name "*.tmp" -delete 2>/dev/null || true
  find . -name "*.bak" -delete 2>/dev/null || true
  find . -name "*.backup" -delete 2>/dev/null || true
  
  # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å–±–æ—Ä–∫–∏
  rm -f build.log error.log 2>/dev/null || true
  
  print -P "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

build_project() {
  print -P "\n${CYAN}üî® –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...${NC}"
  
  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–±–æ—Ä–∫–∏
  local build_cmd="build"
  if [[ "$MODE" == "development" ]]; then
    build_cmd="build:dev"
  fi
  
  # –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  print -P "${YELLOW}‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: pnpm run $build_cmd${NC}"
  
  if [[ "$DEBUG" == "true" ]]; then
    # –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å –≤—ã–≤–æ–¥
    pnpm run $build_cmd
  else
    # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
    if ! pnpm run $build_cmd > build.log 2>&1; then
      print -P "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞${NC}"
      print -P "${YELLOW}üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ —Å–±–æ—Ä–∫–∏:${NC}"
      tail -20 build.log
      exit 1
    fi
  fi
  
  print -P "${GREEN}‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞${NC}"
}

# ================================
# –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø
# ================================

fix_variable_duplication() {
  print -P "\n${CYAN}üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...${NC}"
  
  local js_file="dist/assets/js/index.ts.js"
  
  if [[ ! -f "$js_file" ]]; then
    print -P "${YELLOW}‚ö†Ô∏è –§–∞–π–ª $js_file –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ${NC}"
    return 0
  fi
  
  # –°–æ–∑–¥–∞–µ–º backup
  cp "$js_file" "${js_file}.backup"
  
  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π Z
  print -P "${YELLOW}üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π Z...${NC}"
  
  # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é Z –Ω–∞ StreamZ –≤–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
  sed 's/Z=B;Z\.initDone=!1;Z\.openStreams=new Map/StreamZ=B;StreamZ.initDone=!1;StreamZ.openStreams=new Map/g' "${js_file}.backup" > "$js_file"
  
  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Z –≤–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
  sed -i.tmp 's/new Z(e,de/new StreamZ(e,de/g' "$js_file"
  rm -f "${js_file}.tmp"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
  if command -v node >/dev/null 2>&1; then
    if node -c "$js_file" 2>/dev/null; then
      print -P "${GREEN}‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π Z –∏—Å–ø—Ä–∞–≤–ª–µ–Ω${NC}"
      rm -f "${js_file}.backup"
    else
      print -P "${RED}‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è${NC}"
      print -P "${YELLOW}üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ backup...${NC}"
      mv "${js_file}.backup" "$js_file"
      return 1
    fi
  else
    print -P "${YELLOW}‚ö†Ô∏è Node.js –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞${NC}"
  fi
}

fix_module_issues() {
  print -P "\n${CYAN}üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å ES –º–æ–¥—É–ª—è–º–∏...${NC}"
  
  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ!)
  fix_variable_duplication
  
  # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º background script
  if [[ -f "dist/assets/js/index.ts.js" ]]; then
    print -P "${YELLOW}üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ background script...${NC}"
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ import statements –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if grep -q "import{.*}from.*\.js" "dist/assets/js/index.ts.js" 2>/dev/null; then
      sed -i.bak 's/import{[^}]*}from"[^"]*\.js";//g' "dist/assets/js/index.ts.js"
      rm -f "dist/assets/js/index.ts.js.bak"
      print -P "${GREEN}‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ import statements —É–¥–∞–ª–µ–Ω—ã${NC}"
    fi
  fi
  
  # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º content script (–µ—Å–ª–∏ –±—ã–ª —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ES –º–æ–¥—É–ª—å)
  if [[ -f "dist/assets/js/index-legacy.js.js" ]]; then
    print -P "${YELLOW}üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ content script...${NC}"
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ ES –º–æ–¥—É–ª–∏ –∏–∑ content script
    sed -i.bak 's/import{[^}]*}from"[^"]*";//g' "dist/assets/js/index-legacy.js.js"
    sed -i.bak 's/export{[^}]*};//g' "dist/assets/js/index-legacy.js.js"
    sed -i.bak 's/export default[^;]*;//g' "dist/assets/js/index-legacy.js.js"
    
    rm -f "dist/assets/js/index-legacy.js.js.bak"
    print -P "${GREEN}‚úÖ Content script –∏—Å–ø—Ä–∞–≤–ª–µ–Ω${NC}"
  fi
}

# ================================
# –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í
# ================================

copy_additional_files() {
  print -P "\n${CYAN}üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...${NC}"
  
  local copied_files=0
  
  # 1. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ content script
  mkdir -p "dist/content-script"
  if [[ -f "src/content-script/index-legacy.js" ]]; then
    cp "src/content-script/index-legacy.js" "dist/content-script/index-legacy.js"
    print -P "${GREEN}‚úÖ Content script —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω${NC}"
    ((copied_files++))
  else
    print -P "${RED}‚ùå Content script –Ω–µ –Ω–∞–π–¥–µ–Ω: src/content-script/index-legacy.js${NC}"
    exit 1
  fi
  
  # 2. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ offscreen —Ñ–∞–π–ª–æ–≤
  mkdir -p "dist/offscreen"
  
  if [[ -f "src/offscreen/offscreen.html" ]]; then
    cp "src/offscreen/offscreen.html" "dist/offscreen/offscreen.html"
    print -P "${GREEN}‚úÖ Offscreen HTML —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω${NC}"
    ((copied_files++))
  fi
  
  if [[ -f "src/offscreen/offscreen.js" ]]; then
    cp "src/offscreen/offscreen.js" "dist/offscreen/offscreen.js"
    print -P "${GREEN}‚úÖ Offscreen JS —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω${NC}"
    ((copied_files++))
  fi
  
  # 3. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫
  mkdir -p "dist/icons"
  local icons_copied=0
  
  for SIZE in 16 32 48 128; do
    # –û–±—ã—á–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
    if [[ -f "public/icons/icon-${SIZE}.png" ]]; then
      cp "public/icons/icon-${SIZE}.png" "dist/icons/icon-${SIZE}.png"
      ((icons_copied++))
    elif [[ -f "public/icons/icon.svg" ]]; then
      cp "public/icons/icon.svg" "dist/icons/icon-${SIZE}.png"
      ((icons_copied++))
    fi
    
    # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if [[ -f "public/icons/icon-changed-${SIZE}.png" ]]; then
      cp "public/icons/icon-changed-${SIZE}.png" "dist/icons/icon-changed-${SIZE}.png"
      ((icons_copied++))
    elif [[ -f "public/icons/icon-changed.svg" ]]; then
      cp "public/icons/icon-changed.svg" "dist/icons/icon-changed-${SIZE}.png"
      ((icons_copied++))
    fi
  done
  
  print -P "${GREEN}‚úÖ –ò–∫–æ–Ω–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã: $icons_copied —Ñ–∞–π–ª–æ–≤${NC}"
  
  print -P "${GREEN}‚úÖ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: $copied_files${NC}"
}

# ================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï MANIFEST
# ================================

fix_manifest() {
  print -P "\n${CYAN}üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ manifest.json...${NC}"
  
  local manifest="dist/manifest.json"
  
  if [[ ! -f "$manifest" ]]; then
    print -P "${RED}‚ùå manifest.json –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    exit 1
  fi
  
  # –°–æ–∑–¥–∞–µ–º backup
  cp "$manifest" "${manifest}.backup"
  
  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ content script –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  if command -v jq >/dev/null 2>&1; then
    print -P "${YELLOW}üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º jq –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...${NC}"
    
    jq '
      .content_scripts[0].js = ["content-script/index-legacy.js"] |
      .content_scripts[0].matches = ["http://*/*", "https://*/*"] |
      .content_scripts[0].all_frames = true |
      .web_accessible_resources = [
        {
          "matches": ["<all_urls>"],
          "resources": ["content-script/*", "icons/*"],
          "use_dynamic_url": false
        }
      ] |
      if .content_security_policy? then 
        .content_security_policy.extension_pages |= gsub("unsafe-eval"; "") |
        .content_security_policy.extension_pages |= gsub("  "; " ")
      else . end
    ' "${manifest}.backup" > "$manifest"
    
    print -P "${GREEN}‚úÖ Manifest –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ jq${NC}"
  else
    print -P "${YELLOW}üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º sed –∫–∞–∫ fallback...${NC}"
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
    sed -i.tmp 's|"assets/js/index-legacy\.js\.js"|"content-script/index-legacy.js"|g' "$manifest"
    
    # –£–¥–∞–ª—è–µ–º unsafe-eval
    sed -i.tmp 's/"unsafe-eval"[[:space:]]*//g' "$manifest"
    sed -i.tmp 's/;;/;/g' "$manifest"
    
    rm -f "${manifest}.tmp"
    print -P "${GREEN}‚úÖ Manifest –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ sed${NC}"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
  if command -v jq >/dev/null 2>&1; then
    if jq empty "$manifest" 2>/dev/null; then
      print -P "${GREEN}‚úÖ Manifest JSON –≤–∞–ª–∏–¥–µ–Ω${NC}"
    else
      print -P "${RED}‚ùå Manifest JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω${NC}"
      print -P "${YELLOW}üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ backup...${NC}"
      mv "${manifest}.backup" "$manifest"
      return 1
    fi
  fi
  
  # –£–¥–∞–ª—è–µ–º backup —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
  rm -f "${manifest}.backup"
}

# ================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê
# ================================

validate_build() {
  print -P "\n${CYAN}üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–±–æ—Ä–∫–∏...${NC}"
  
  local errors=0
  local warnings=0
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
  local required_files=(
    "dist/manifest.json"
    "dist/content-script/index-legacy.js"
    "dist/src/ui/popup/index.html"
    "dist/service-worker-loader.js"
    "dist/offscreen/offscreen.html"
    "dist/offscreen/offscreen.js"
  )
  
  print -P "${YELLOW}üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:${NC}"
  for file in "${required_files[@]}"; do
    if [[ ! -f "$file" ]]; then
      print -P "${RED}‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: $file${NC}"
      ((errors++))
    else
      print -P "${GREEN}‚úÖ $file${NC}"
    fi
  done
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∫–æ–Ω–∫–∏
  print -P "\n${YELLOW}üñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–æ–∫:${NC}"
  for SIZE in 16 32 48 128; do
    if [[ ! -f "dist/icons/icon-$SIZE.png" ]]; then
      print -P "${YELLOW}‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: icon-$SIZE.png${NC}"
      ((warnings++))
    fi
  done
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript —Ñ–∞–π–ª–æ–≤
  if command -v node >/dev/null 2>&1; then
    print -P "\n${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript:${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º background script
    if [[ -f "dist/assets/js/index.ts.js" ]]; then
      if node -c "dist/assets/js/index.ts.js" 2>/dev/null; then
        print -P "${GREEN}‚úÖ Background script: —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω${NC}"
      else
        print -P "${RED}‚ùå Background script: —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏${NC}"
        ((errors++))
      fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º content script
    if [[ -f "dist/content-script/index-legacy.js" ]]; then
      if node -c "dist/content-script/index-legacy.js" 2>/dev/null; then
        print -P "${GREEN}‚úÖ Content script: —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω${NC}"
      else
        print -P "${RED}‚ùå Content script: —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏${NC}"
        ((errors++))
      fi
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ content script –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ES import statements
      if grep -q "^import\\s*{" "dist/content-script/index-legacy.js" 2>/dev/null; then
        print -P "${RED}‚ùå Content script —Å–æ–¥–µ—Ä–∂–∏—Ç ES import statements${NC}"
        ((errors++))
      else
        print -P "${GREEN}‚úÖ Content script –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ES import statements${NC}"
      fi
    fi
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º manifest.json
  print -P "\n${YELLOW}üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ manifest.json:${NC}"
  if [[ -f "dist/manifest.json" ]]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if command -v jq >/dev/null 2>&1; then
      if jq empty "dist/manifest.json" 2>/dev/null; then
        print -P "${GREEN}‚úÖ Manifest JSON –≤–∞–ª–∏–¥–µ–Ω${NC}"
      else
        print -P "${RED}‚ùå Manifest JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω${NC}"
        ((errors++))
      fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
    if grep -q "content-script/index-legacy.js" "dist/manifest.json" 2>/dev/null; then
      print -P "${GREEN}‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ content script${NC}"
    else
      print -P "${RED}‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ content script${NC}"
      ((errors++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    local required_permissions=("storage" "alarms" "scripting" "activeTab" "tabs" "offscreen")
    for perm in "${required_permissions[@]}"; do
      if grep -q "\"$perm\"" "dist/manifest.json" 2>/dev/null; then
        [[ "$DEBUG" == "true" ]] && print -P "${GREEN}‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: $perm${NC}"
      else
        print -P "${YELLOW}‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: $perm${NC}"
        ((warnings++))
      fi
    done
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏
  print -P "\n${YELLOW}üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Å–±–æ—Ä–∫–∏:${NC}"
  if command -v du >/dev/null 2>&1; then
    local size=$(du -sh dist 2>/dev/null | cut -f1)
    print -P "${CYAN}üì¶ –†–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏: $size${NC}"
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–±–æ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
    local size_mb=$(du -sm dist 2>/dev/null | cut -f1)
    if ((size_mb > 50)); then
      print -P "${YELLOW}‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –¥–æ–≤–æ–ª—å–Ω–æ –±–æ–ª—å—à–∞—è ($size), —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é${NC}"
      ((warnings++))
    fi
  fi
  
  # –ò—Ç–æ–≥–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  print -P "\n${YELLOW}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:${NC}"
  if ((errors > 0)); then
    print -P "${RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: $errors${NC}"
    print -P "${YELLOW}‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $warnings${NC}"
    print -P "${RED}üö® –°–±–æ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏!${NC}"
    return 1
  elif ((warnings > 0)); then
    print -P "${GREEN}‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: 0${NC}"
    print -P "${YELLOW}‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $warnings${NC}"
    print -P "${YELLOW}‚ú® –°–±–æ—Ä–∫–∞ –≥–æ—Ç–æ–≤–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏${NC}"
  else
    print -P "${GREEN}‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: 0${NC}"
    print -P "${GREEN}‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: 0${NC}"
    print -P "${GREEN}üéâ –°–±–æ—Ä–∫–∞ –∏–¥–µ–∞–ª—å–Ω–∞!${NC}"
  fi
  
  return 0
}

# ================================
# –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø
# ================================

package_extension() {
  if [[ "$MODE" == "production" ]]; then
    print -P "\n${CYAN}üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP-–∞—Ä—Ö–∏–≤–∞...${NC}"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ manifest
    local version="0.1.0"
    if command -v jq >/dev/null 2>&1; then
      version=$(jq -r '.version // "0.1.0"' dist/manifest.json 2>/dev/null)
    else
      version=$(grep -oP '"version":\\s*"\\K[^"]+' dist/manifest.json 2>/dev/null || echo "0.1.0")
    fi
    
    local zip_name="web-check-v${version}-$(date +%Y%m%d).zip"
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    if command -v zip >/dev/null 2>&1; then
      (cd dist && zip -qr "../${zip_name}" . -x "*.backup" "*.bak" "*.tmp")
      print -P "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤: %s${NC}" "$zip_name"
      
      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞
      if command -v ls >/dev/null 2>&1; then
        local archive_size=$(ls -lh "$zip_name" 2>/dev/null | awk '{print $5}')
        print -P "${CYAN}üìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: $archive_size${NC}"
      fi
    else
      print -P "${YELLOW}‚ö†Ô∏è zip –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞—Ä—Ö–∏–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω${NC}"
    fi
  else
    print -P "${YELLOW}‚ö†Ô∏è –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ production —Ä–µ–∂–∏–º–µ${NC}"
  fi
}

cleanup_temp_files() {
  print -P "\n${CYAN}üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...${NC}"
  
  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ dist
  find dist -name "*.backup" -delete 2>/dev/null || true
  find dist -name "*.bak" -delete 2>/dev/null || true
  find dist -name "*.tmp" -delete 2>/dev/null || true
  
  # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏ –≤ production —Ä–µ–∂–∏–º–µ
  if [[ "$MODE" == "production" && "$DEBUG" != "true" ]]; then
    rm -f build.log error.log 2>/dev/null || true
  fi
  
  print -P "${GREEN}‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã${NC}"
}

print_summary() {
  print -P "\n${BLUE}================================================================${NC}"
  print -P "${GREEN}üéâ –°–ë–û–†–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!${NC}"
  print -P "${BLUE}================================================================${NC}"
  
  print -P "\n${CYAN}üîß –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:${NC}"
  print -P "  ${GREEN}‚úÖ${NC} –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π Z –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ"
  print -P "  ${GREEN}‚úÖ${NC} ES –º–æ–¥—É–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
  print -P "  ${GREEN}‚úÖ${NC} –ü—É—Ç–∏ –≤ manifest.json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"
  print -P "  ${GREEN}‚úÖ${NC} Content script –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"
  print -P "  ${GREEN}‚úÖ${NC} Offscreen API —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
  print -P "  ${GREEN}‚úÖ${NC} –ò–∫–æ–Ω–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã"
  
  print -P "\n${CYAN}üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–±–æ—Ä–∫–∏:${NC}"
  if [[ -d "dist" ]]; then
    print -P "  ${YELLOW}üìÅ${NC} dist/"
    print -P "    ${GREEN}‚úÖ${NC} manifest.json"
    print -P "    ${GREEN}‚úÖ${NC} service-worker-loader.js"
    print -P "    ${GREEN}‚úÖ${NC} content-script/index-legacy.js"
    print -P "    ${GREEN}‚úÖ${NC} offscreen/offscreen.{html,js}"
    print -P "    ${GREEN}‚úÖ${NC} icons/ (8 —Ñ–∞–π–ª–æ–≤)"
    print -P "    ${GREEN}‚úÖ${NC} src/ui/{popup,options}/"
  fi
  
  print -P "\n${CYAN}üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:${NC}"
  print -P "  ${YELLOW}1.${NC} –û—Ç–∫—Ä–æ–π—Ç–µ ${MAGENTA}chrome://extensions/${NC}"
  print -P "  ${YELLOW}2.${NC} –í–∫–ª—é—á–∏—Ç–µ ${MAGENTA}—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞${NC}"
  print -P "  ${YELLOW}3.${NC} –ù–∞–∂–º–∏—Ç–µ ${MAGENTA}'–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ'${NC}"
  print -P "  ${YELLOW}4.${NC} –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É ${MAGENTA}dist${NC}"
  print -P "  ${YELLOW}5.${NC} –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ª—É—á—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"
  
  if [[ -f "web-check-v"*".zip" ]]; then
    local zip_file=$(ls -t web-check-v*.zip | head -1)
    print -P "\n${CYAN}üì¶ –ì–æ—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤: ${MAGENTA}$zip_file${NC}"
  fi
  
  print -P "\n${GREEN}üéä –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!${NC}"
  print -P "${BLUE}================================================================${NC}"
}

# ================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ================================

main() {
  print_header
  
  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  if [[ "$VALIDATE_ONLY" == "true" ]]; then
    if [[ ! -d "dist" ]]; then
      print -P "${RED}‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É.${NC}"
      exit 1
    fi
    validate_build
    return $?
  fi
  
  # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
  check_requirements
  check_project_structure
  
  # –≠—Ç–∞–ø 2: –ò–∫–æ–Ω–∫–∏
  if [[ "$GENERATE_ICONS" == "true" ]]; then
    generate_icons
  else
    check_icons
  fi
  
  # –≠—Ç–∞–ø 3: –û—á–∏—Å—Ç–∫–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
  if [[ "$FORCE_CLEAN" == "true" ]] || [[ ! -d "dist" ]]; then
    cleanup_build
  fi
  
  # –≠—Ç–∞–ø 4: –°–±–æ—Ä–∫–∞
  build_project
  
  # –≠—Ç–∞–ø 5: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  fix_module_issues
  
  # –≠—Ç–∞–ø 6: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  copy_additional_files
  
  # –≠—Ç–∞–ø 7: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ manifest
  fix_manifest
  
  # –≠—Ç–∞–ø 8: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  if ! validate_build; then
    print -P "\n${RED}üö® –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!${NC}"
    exit 1
  fi
  
  # –≠—Ç–∞–ø 9: –£–ø–∞–∫–æ–≤–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  package_extension
  
  # –≠—Ç–∞–ø 10: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
  cleanup_temp_files
  
  # –≠—Ç–∞–ø 11: –ò—Ç–æ–≥–∏
  print_summary
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap 'print -P "\n${YELLOW}‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º${NC}"; exit 130' INT TERM

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
