/**
 * Debug —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è offscreen API
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —á–µ—Ä–µ–∑ DevTools
 */

import { testOffscreenMonitoring, getMonitoringStats } from './monitor'
import {
  ensureOffscreenDocument,
  pingOffscreenDocument,
  closeOffscreenDocument,
} from './offscreenManager'

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è Chrome API
interface ChromeGlobal {
  chrome?: {
    runtime?: {
      getContexts?: (options: {
        contextTypes: string[]
      }) => Promise<Array<{ creationTime?: number }>>
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ offscreen –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function getOffscreenStats() {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º chrome API –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ Chrome-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    const contexts =
      (await (globalThis as ChromeGlobal).chrome?.runtime?.getContexts?.({
        contextTypes: ['OFFSCREEN_DOCUMENT'],
      })) || []

    const exists = contexts.length > 0
    const cacheAge = Date.now() - (exists ? contexts[0].creationTime || 0 : 0)

    return {
      exists,
      cacheAge,
      contextCount: contexts.length,
    }
  } catch (error) {
    return {
      exists: false,
      cacheAge: 0,
      contextCount: 0,
      error: error instanceof Error ? error.message : String(error),
    }
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è console
if (typeof globalThis !== 'undefined') {
  // @ts-expect-error - –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  globalThis.webCheckDebug = {
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async testMonitoring(url = 'https://example.com', selector = 'h1') {
      console.log('üß™ Testing offscreen monitoring...')
      await testOffscreenMonitoring(url, selector)
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
      console.log('üìä Getting monitoring stats...')
      const stats = await getMonitoringStats()
      console.table(stats)
      return stats
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ offscreen –¥–æ–∫—É–º–µ–Ω—Ç–∞
    async checkOffscreen() {
      console.log('üñ•Ô∏è Checking offscreen document...')
      try {
        await ensureOffscreenDocument()
        const responsive = await pingOffscreenDocument()
        const stats = await getOffscreenStats()

        console.log('Offscreen document status:')
        console.table({
          exists: stats.exists,
          responsive: responsive,
          cacheAge: `${Math.round(stats.cacheAge / 1000)}s`,
        })

        return { exists: stats.exists, responsive, cacheAge: stats.cacheAge }
      } catch (error) {
        console.error('‚ùå Offscreen check failed:', error)
        return {
          exists: false,
          responsive: false,
          error: error instanceof Error ? error.message : String(error),
        }
      }
    },

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ offscreen –¥–æ–∫—É–º–µ–Ω—Ç–∞
    async resetOffscreen() {
      console.log('üîÑ Resetting offscreen document...')
      try {
        await closeOffscreenDocument()
        console.log('‚úÖ Offscreen document closed')

        await ensureOffscreenDocument()
        console.log('‚úÖ Offscreen document recreated')

        return true
      } catch (error) {
        console.error('‚ùå Reset failed:', error)
        return false
      }
    },

    // –¢–µ—Å—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    async testSite(url: string, selector: string) {
      if (!url || !selector) {
        console.error('‚ùå Usage: testSite("https://example.com", "h1")')
        return
      }

      console.log(`üéØ Testing ${url} with selector "${selector}"`)
      await testOffscreenMonitoring(url, selector)
    },

    // –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    help() {
      console.log(`
üöÄ WebCheck Debug Console Commands:

üìä webCheckDebug.getStats()
   - Get monitoring statistics

üß™ webCheckDebug.testMonitoring()
   - Test with default URL (example.com)

üéØ webCheckDebug.testSite(url, selector)
   - Test with specific URL and selector
   - Example: testSite("https://github.com", "h1")

üñ•Ô∏è webCheckDebug.checkOffscreen()
   - Check offscreen document status

üîÑ webCheckDebug.resetOffscreen()
   - Reset offscreen document

‚ùì webCheckDebug.help()
   - Show this help

Example usage:
  webCheckDebug.testSite("https://news.ycombinator.com", ".title")
      `)
    },
  }

  console.log('üêõ WebCheck Debug Console loaded! Type webCheckDebug.help() for available commands')
}
